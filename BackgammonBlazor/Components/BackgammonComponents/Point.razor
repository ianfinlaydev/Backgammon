@using BackgammonBlazor.Models.BoardPoint
@using BackgammonBlazor.Models.Game
@inject GameEventManager GameEventManager
@rendermode InteractiveServer

<div class="point-container" @onclick="TryMove">
    @RenderBoardPoint()
    @RenderPointCheckers()
</div>

@code {
    [Parameter, EditorRequired]
    public GameModel GameModel { get; set; }

    public BoardPointModel BoardPoint { get; set; }

    protected override void OnInitialized()
    {
        BoardPoint = GameModel.GetPoint(BoardPointHelper.GetNextPointNumber());
    }

    private const int _maxCheckerCapacity = 5;

    private RenderFragment RenderBoardPoint() => (__builder) =>
    {
        string cssPointClass = GetPointClassCss(BoardPoint.IsTopPoint(), BoardPoint.IsLightPoint());
        string cssPointStyle = GetPointStyleCss(BoardPoint.IsTopPoint());

        <div class="board-point point-layer1 @(cssPointClass)" style="@(cssPointStyle)"></div>
    };

    private RenderFragment RenderPointCheckers() => (__builder) =>
    {
        if (!BoardPoint.HasCheckers())
        {
            return;
        }

        <div class="point-layer2">
            @for (int i = 0; i < Math.Min(BoardPoint.Checkers.Count, _maxCheckerCapacity); i++)
            {
                <Checker CheckerModel="@BoardPoint.Checkers[i]" Offset="i" />
            }
        </div>
    };

    private void TryMove()
    {
        //TODO: Check if dice value is empty after trymove & updateboard
        //  because if the game is complete and there dice rolls left, 
        //  the player can't finish their turn.
        if (GameModel.TryMove(BoardPoint))
        {
            UpdateBoard();
        }
    }

    private string GetPointClassCss(bool isTopPoint, bool isLightPoint)
        => isTopPoint && isLightPoint ? "top-light" :
        isTopPoint && !isLightPoint ? "top-dark" :
        !isTopPoint && isLightPoint ? "bottom-light" :
        "bottom-dark";
    
    private string GetPointStyleCss(bool isTopPoint)
        => $"{(isTopPoint ? "top: " : "bottom: ")}0";

    private void UpdateBoard()
        => GameEventManager.Notify();
}
