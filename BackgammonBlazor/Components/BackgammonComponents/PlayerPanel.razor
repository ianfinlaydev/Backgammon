@using BackgammonBlazor.Models.Game
@using BackgammonBlazor.Models.Player
@inject GameModel Game
@inject GameEventManager GameEventManager
@rendermode InteractiveServer

<div>
    <div>@GetPlayerLabelString()</div>
    <div>@GetPipCountString()</div>

    @if (_showDice)
    {
        <Dice GameModel="Game" />
    }
    else
    {
        <button class="btn btn-primary" @onclick="RollDice" hidden="@(_showDice)" disabled="@(IsDisabled())">
            Roll Dice
        </button>
    }

    @if (_player == Game.Hero && Game.ActiveTurn.HasMoved())
    {
        <button class="btn btn-primary" style="margin-right: 10px;" @onclick="UndoMove">Undo</button>

        if (Game.IsCompleteTurn())
        {
            <button class="btn btn-primary" @onclick="CompleteTurn">Confirm</button>
        }
    }
</div>

@code {
    [Parameter, EditorRequired]
    public PlayerColor PlayerColor { get; set; }

    private PlayerModel _player;
    private bool _showDice = false;

    protected override void OnInitialized()
    {
        _player = Game.GetPlayer(PlayerColor);
    }

    private void RollDice()
    {
        _showDice = true;

        Game.Dice.Roll();

        UpdatePlayerPanel();
    }

    private void CompleteTurn()
    {
        _showDice = false;

        Game.CompleteTurn();
        Game.StartNewTurn();

        UpdateBoard();
    }

    private void UndoMove() 
    {
        Game.UndoMove();

        UpdateBoard();
    }

    private bool IsDisabled()
        => _player != Game.Hero;

    private string GetPlayerLabelString()
        => $"{(PlayerColor == PlayerColor.Light ? "Light" : "Dark")} Player";

    private string GetPipCountString()
        => $"Pip Count: {_player.PipCount}";

    private void UpdateBoard()
        => GameEventManager.Notify();


    private void UpdatePlayerPanel()
        => StateHasChanged();
}
