@using BackgammonBlazor.GameObserver
@using BackgammonBlazor.Helpers
@using BackgammonBlazor.Models
@inject GameEventManager GameEventManager
@rendermode InteractiveServer

<div>
    <div>@GetPlayerLabelString()</div>
    <div>@GetPipCountString()</div>

    @if (_showDice)
    {
        <Dice GameModel="GameModel" />
    }
    else
    {
        <button class="btn btn-primary" @onclick="RollDice" hidden="@(_showDice)" disabled="@(IsDisabled())">
            Roll Dice
        </button>
    }

    @if (Player == GameModel.ActivePlayer && GameModel.ActiveTurn.HasMoved())
    {
        <button class="btn btn-primary" @onclick="UndoMove">Undo</button>

        if (GameModel.IsCompleteTurn())
        {
            <button class="btn btn-primary" @onclick="CompleteTurn">Confirm</button>
        }
    }
</div>

@code {
    [Parameter, EditorRequired] 
    public GameModel GameModel { get; set; }

    [Parameter, EditorRequired] 
    public PlayerModel Player { get; set; }

    [Parameter, EditorRequired] 
    public EventCallback UpdateBoard_old { get; set; }

    private bool _showDice = false;

    private void RollDice()
    {
        _showDice = true;

        GameModel.Dice.Roll();

        UpdatePlayerPanel();
    }

    private void CompleteTurn()
    {
        _showDice = false;

        GameModel.CompleteTurn();
        GameModel.StartNewTurn();

        UpdateBoard();
    }

    private void UndoMove() 
    {
        GameModel.UndoMove();

        UpdateBoard();
    }

    private bool IsDisabled()
        => Player != GameModel.ActivePlayer;

    private string GetPlayerLabelString()
        => $"{(Player.PlayerColor == PlayerColor.Light ? "Light" : "Dark")} Player";

    private string GetPipCountString()
        => $"Pip Count: {Player.PipCount}";

    private void UpdateBoard()
        => GameEventManager.Notify();


    private void UpdatePlayerPanel()
        => StateHasChanged();
}
