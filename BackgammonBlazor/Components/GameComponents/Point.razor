@using BackgammonBlazor.Models.Point
@using BackgammonBlazor.Models.Game
@inject GameModel Game
@inject GameEventManager GameEventManager
@rendermode InteractiveServer

<div class="point-container" @onclick="Move">
    @RenderBoardPoint()
    @RenderPointCheckers()
</div>

@code {
    [Parameter, EditorRequired]
    public int PointNumber { get; set; }

    private PointModel _point;

    protected override void OnInitialized()
    {
        _point = Game.GetPoint(PointNumber);
    }

    private const int _maxCheckerCapacity = 5;

    private RenderFragment RenderBoardPoint() => (__builder) =>
    {
        string cssPointClass = GetPointClassCss(_point.IsTopPoint(), _point.IsLightPoint());
        string cssPointStyle = GetPointStyleCss(_point.IsTopPoint());

        <div class="board-point point-layer1 @(cssPointClass)" style="@(cssPointStyle)"></div>
    };

    private RenderFragment RenderPointCheckers() => (__builder) =>
    {
        if (!_point.HasCheckers())
        {
            return;
        }

        <div class="point-layer2">
            @for (int i = 0; i < Math.Min(_point.Checkers.Count, _maxCheckerCapacity); i++)
            {
                <Checker CheckerModel="@_point.Checkers[i]" Offset="i" />
            }
        </div>
    };

    private void Move()
    {
        //TODO: Check if dice value is empty after move & updateboard
        //  because if the game is complete and there dice rolls left, 
        //  the player can't finish their turn.
        if (Game.TryMove(_point))
        {
            UpdateBoard();
        }
    }

    private string GetPointClassCss(bool isTopPoint, bool isLightPoint)
        => isTopPoint && isLightPoint ? "top-light" :
        isTopPoint && !isLightPoint ? "top-dark" :
        !isTopPoint && isLightPoint ? "bottom-light" :
        "bottom-dark";
    
    private string GetPointStyleCss(bool isTopPoint)
        => $"{(isTopPoint ? "top: " : "bottom: ")}0";

    private void UpdateBoard()
        => GameEventManager.Notify();
}
