@using BackgammonBlazor.Models.Game
@inject GameEventManager GameEventManager
@rendermode InteractiveServer

<div class="dice-container" @onclick="ReverseOrderOfValues">
    @for (int i = 0; i < _displayValues.Count; i++)
    {
        _isUsedValue = _usedValues.Contains(_displayValues[i]);

        if (_isUsedValue)
        {
            _usedValues.Remove(_displayValues[i]);
        }

        @RenderDice(_displayValues[i], _isUsedValue)
    }
</div>

@code {
    [Parameter, EditorRequired]
    public GameModel Game { get; set; }

    private List<int> _displayValues;
    private List<int> _usedValues;

    private bool _isUsedValue;
    private bool _isAscOrder;

    protected override void OnInitialized()
    {
        GameEventManager.Subscribe(OnGameEventReceived);

        UpdateValueCollections();
    }

    private void OnGameEventReceived()
    {
        UpdateValueCollections();
    }

    private void ReverseOrderOfValues()
    {
        _isAscOrder = !_isAscOrder;
        Game.Dice.ReverseValueOrder();
        UpdateValueCollections();
        StateHasChanged();
    }

    private void UpdateValueCollections()
    {
        _displayValues = Game.Dice.GetAllValues().ToList();
        _usedValues = Game.Dice.GetUsedValues().ToList();
    }

    private RenderFragment RenderDice(int value, bool isUsed) => (__builder) =>
    {
        switch (value)
        {
            case 1:
                @DiceValue1();
                break;
            case 2:
                @DiceValue2();
                break;
            case 3:
                @DiceValue3();
                break;
            case 4:
                @DiceValue4();
                break;
            case 5:
                @DiceValue5();
                break;
            case 6:
                @DiceValue6();
                break;
            default:
                throw new ArgumentException();
        }
    };

    private RenderFragment DiceValue1() => (__builder) =>
    {
        <div class="dice first-face @($"{(_isUsedValue ? "gray-out" : "")}")">
            <span class="dot"></span>
        </div>
    };

    private RenderFragment DiceValue2() => (__builder) =>
    {
        <div class="dice second-face @($"{(_isUsedValue ? "gray-out" : "")}")">
            <span class="dot"></span>
            <span class="dot"></span>
        </div>
    };

    private RenderFragment DiceValue3() => (__builder) =>
    {
        <div class="dice third-face @($"{(_isUsedValue ? "gray-out" : "")}")">
            <span class="dot"></span>
            <span class="dot"></span>
            <span class="dot"></span>
        </div>
    };

    private RenderFragment DiceValue4() => (__builder) =>
    {
        <div class="dice fourth-face @($"{(_isUsedValue ? "gray-out" : "")}")">
            <div class="column">
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
            <div class="column">
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
        </div>
    };

    private RenderFragment DiceValue5() => (__builder) =>
    {
        <div class="dice fifth-face @($"{(_isUsedValue ? "gray-out" : "")}")">
            <div class="column">
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
            <div class="column">
                <span class="dot"></span>
            </div>
            <div class="column">
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
        </div>
    };

    private RenderFragment DiceValue6() => (__builder) =>
    {
        <div class="dice fourth-face @($"{(_isUsedValue ? "gray-out" : "")}")">
            <div class="column">
                <span class="dot"></span>
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
            <div class="column">
                <span class="dot"></span>
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
        </div>
    };
}
